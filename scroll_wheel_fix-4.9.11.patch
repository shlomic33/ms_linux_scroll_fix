diff --git a/drivers/hid/hid-ids.h b/drivers/hid/hid-ids.h
index 9845189..206a4f0 100644
--- a/drivers/hid/hid-ids.h
+++ b/drivers/hid/hid-ids.h
@@ -724,6 +724,7 @@
 #define USB_DEVICE_ID_MS_TYPE_COVER_PRO_4_JP 0x07e9
 #define USB_DEVICE_ID_MS_TYPE_COVER_3    0x07de
 #define USB_DEVICE_ID_MS_POWER_COVER     0x07da
+#define USB_DEVICE_ID_MS_SCULPT_ERGONOMIC 0x07a5

 #define USB_VENDOR_ID_MOJO		0x8282
 #define USB_DEVICE_ID_RETRO_ADAPTER	0x3201
diff --git a/drivers/hid/hid-microsoft.c b/drivers/hid/hid-microsoft.c
index c6cd392..3397781 100644
--- a/drivers/hid/hid-microsoft.c
+++ b/drivers/hid/hid-microsoft.c
@@ -6,6 +6,7 @@
  *  Copyright (c) 2005 Michael Haboustak <mike-@cinci.rr.com> for Concept2, Inc
  *  Copyright (c) 2006-2007 Jiri Kosina
  *  Copyright (c) 2008 Jiri Slaby
+ *  Copyright (c) 2017 shlomi cohen <shlomic33@gmail.com>
  */

 /*
@@ -19,7 +20,6 @@
 #include <linux/input.h>
 #include <linux/hid.h>
 #include <linux/module.h>
-
 #include "hid-ids.h"

 #define MS_HIDINPUT		0x01
@@ -28,6 +28,11 @@
 #define MS_RDESC		0x08
 #define MS_NOGET		0x10
 #define MS_DUPLICATE_USAGES	0x20
+/*
+ * mark mice that have high DPI scroll wheel in order to set the matching
+ * resolution multiplier to its minimum value.
+ */
+#define MS_HIGH_DPI_SCROLL_WHEEL 0x40

 static __u8 *ms_report_fixup(struct hid_device *hdev, __u8 *rdesc,
 		unsigned int *rsize)
@@ -223,6 +228,7 @@ static int ms_probe(struct hid_device *hdev, const struct hid_device_id *id)
 {
 	unsigned long quirks = id->driver_data;
 	int ret;
+	__u8 *report_buf = NULL;

 	hid_set_drvdata(hdev, (void *)quirks);

@@ -235,6 +241,10 @@ static int ms_probe(struct hid_device *hdev, const struct hid_device_id *id)
 		goto err_free;
 	}

+if ((quirks & MS_HIGH_DPI_SCROLL_WHEEL) && hdev->type != HID_TYPE_USBMOUSE)
+	return -ENODEV;
+
 	ret = hid_hw_start(hdev, HID_CONNECT_DEFAULT | ((quirks & MS_HIDINPUT) ?
 				HID_CONNECT_HIDINPUT_FORCE : 0));
 	if (ret) {
@@ -242,6 +252,25 @@ static int ms_probe(struct hid_device *hdev, const struct hid_device_id *id)
 		goto err_free;
 	}

+	if ((quirks & MS_HIGH_DPI_SCROLL_WHEEL) &&
+		hdev->type == HID_TYPE_USBMOUSE) {
+		hid_info(hdev, "Detected microsoft mouse with high dpi scroll wheel");
+		report_buf = kmalloc(2, GFP_KERNEL);
+		if (report_buf == NULL) {
+			hid_err(hdev, "Couldn't allocate data for buffer");
+		} else {
+			report_buf[0] = 0x12;
+			report_buf[1] = 0x00;
+			if (hid_hw_raw_request(hdev, report_buf[0], report_buf,
+				2, HID_FEATURE_REPORT, HID_REQ_SET_REPORT) == 2)
+				hid_info(hdev, "Successfully turned off high dpi scroll wheel");
+			else
+				hid_warn(hdev, "Failed turning off high dpi scroll wheel feature");
+			kfree(report_buf);
+		}
+	} else
+		return -ENODEV;
+
 	return 0;
 err_free:
 	return ret;
@@ -288,6 +317,8 @@ static const struct hid_device_id ms_devices[] = {
 		.driver_data = MS_HIDINPUT },
 	{ HID_USB_DEVICE(USB_VENDOR_ID_MICROSOFT, USB_DEVICE_ID_MS_COMFORT_KEYBOARD),
 		.driver_data = MS_ERGONOMY},
+	{ HID_USB_DEVICE(USB_VENDOR_ID_MICROSOFT, USB_DEVICE_ID_MS_SCULPT_ERGONOMIC),
+		.driver_data = MS_HIGH_DPI_SCROLL_WHEEL},

 	{ HID_BLUETOOTH_DEVICE(USB_VENDOR_ID_MICROSOFT, USB_DEVICE_ID_MS_PRESENTER_8K_BT),
 		.driver_data = MS_PRESENTER },
